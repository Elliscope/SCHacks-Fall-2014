from pymongo import Connection
import math
import unicodedata
Connection = Connection('localhost',27017)
db=Connection.admin
res=db.authenticate('admin','pwd')
Accounts = db.Accounts
AccountsSchedules = db.AccountSchedules
GlobalSchedules = db.GlobalSchedules
databases = [Accounts,AccountsSchedules,GlobalSchedules]
def verifyUser(username,password):
    if(Accounts.find({'username':username,'password':password}).count() != 0):
        return True
    return False

def addUser(username,password):
    if(verifyUser(username,password)):
       return False
    Accounts.insert({'username':username,'password':password,'times':[]})
    return True

def addUserTime(username, day, timeStart, timeEnd):
    if(AccountsSchedules.find({'username':username,'day':day}).count() == 0):
        a=[]
        for i in range(24):
            a.append(0)
        AccountsSchedules.insert({'username':username,'day':day,'times':a})
    currentUser = AccountsSchedules.find_one({'username':username,'day':day})['times']
    while(timeStart < timeEnd):
        currentUser[timeStart] = 1
        timeStart = timeStart + 1
    AccountsSchedules.update({'username':username,'day':day},{"$set":{'times':currentUser}})

def getAllUser(username):
    a =[]
    days =[]
    times=[]
    for x in AccountsSchedules.find({'username':username}):
        days.append(x['day'])
        times.append(x['times'])
    a.append(days)
    a.append(times)
    return a

def getAllSchedules():
    a = []
    days = []
    times = []
    for x in AccountsSchedules.find({'username':username}):
        days.append(x['day'])
        times.append(x['times'])
    a.append(days)
    a.append(times)
    return a

def addGlobalTime(day, timeStart, timeEnd):
    if(GlobalSchedules.find({'day':day}).count() == 0):
        a=[]
        for i in range(24):
            a.append(0)
        GlobalSchedules.insert({'day':day,'times':a})
    currentDay = GlobalSchedules.find_one({'day':day})['times']
    while(timeStart < timeEnd):
        currentDay[timeStart] = currentDay[timeStart] + 1
        timeStart = timeStart + 1
    GlobalSchedules.update({'day':day}, {"$set": {'times':currentDay}})

def getGlobalDataForTime(day, timeStart):
    if(GlobalSchedules.find({"day":day}).count() == 0):
        return 0
    currentDay = GlobalSchedules.find_one({'day':day})['times']
    return currentDay[timeStart]

def getUserDataForTime(username, day, startTime):
    if(AccountsSchedules.find({'username':username,'day':day}).count() == 0):
        return 0
    current = AccountsSchedules.find_one({'username':username,'day':day})['times']
    return current[startTime]

def clearDatabases():
    for x in databases:
        x.drop()

def timesToString(array):
    string = ""
    start = 0
    end = 0
    index = 0
    toCount = False
    for x in array:
        if x == 1 and toCount == False:
            toCount = True
            start = index
            end = index
        elif x == 1:
            end = index
        elif toCount:
            string = string + str(start) + "-" + str(end) + ", "
            toCount = False
        index = index + 1
    return string
def arrToString(array):
    x = []
    for i in array:
        x.append(timesToString(i))
    return x

#clearDatabases()
